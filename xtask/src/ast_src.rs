pub(crate) struct KindsSrc<'a> {
    pub(crate) punct: &'a [(&'a str, &'a str)],
    pub(crate) keywords: &'a [&'a str],
    pub(crate) literals: &'a [&'a str],
    pub(crate) tokens: &'a [&'a str],
    pub(crate) nodes: &'a [&'a str],
}

pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {
    punct: &[
        (";", "SEMICOLON"),
        (",", "COMMA"),
        ("(", "L_PAREN"),
        (")", "R_PAREN"),
        ("{", "L_CURLY"),
        ("}", "R_CURLY"),
        ("[", "L_BRACK"),
        ("]", "R_BRACK"),
        ("<", "L_ANGLE"),
        (">", "R_ANGLE"),
        ("?", "QUESTION"),
        ("&", "AMP"),
        ("+", "PLUS"),
        ("*", "STAR"),
        ("/", "SLASH"),
        ("%", "PERCENT"),
        ("_", "UNDERSCORE"),
        (".", "DOT"),
        ("=", "EQ"),
        ("==", "EQ2"),
        ("=>", "FAT_ARROW"),
        ("!", "BANG"),
        ("!=", "NEQ"),
        ("-", "MINUS"),
        ("<=", "LTEQ"),
        (">=", "GTEQ"),
        ("&&", "AMP2"),
        ("||", "PIPE2"),
        (":", "COLON"),
        ("|", "PIPE"),
    ],
    keywords: &[
        "as",
        "adds",
        "after",
        "assert",
        "await",
        "builtin",
        "case",
        "catch",
        "class",
        "core",
        "data",
        "def",
        "delta",
        "die",
        "duration",
        "else",
        "exception",
        "export",
        "extends",
        "features",
        "finally",
        "foreach",
        "from",
        "get",
        "hasField",
        "hasInterface",
        "hasMethod",
        "if",
        "implements",
        "import",
        "in",
        "interface",
        "let",
        "local",
        "modifies",
        "module",
        "movecogto",
        "new",
        "null",
        "original",
        "product",
        "productline",
        "recover",
        "removes",
        "return",
        "switch",
        "skip",
        "suspend",
        "then",
        "this",
        "throw",
        "trait",
        "try",
        "type",
        "uses",
        "when",
        "while",
    ],
    literals: &["INT_NUMBER", "FLOAT_NUMBER", "STRING"],
    tokens: &["ERROR", "LOW_IDENT", "CAP_IDENT", "WHITESPACE", "COMMENT"],
    nodes: &[
        "VAR_NAME",
        "TYPE_NAME",
        "PATH",
        "TYPE_PATH",
        "PARAM_LIST",
        "PARAM",
        "TYPE",
        "ANNOTATION",
        "ANNOTATIONS",
        "FN_EXPR",
        "PARTIAL_FN_EXPR",
        "VARIADIC_FN_EXPR",
        "CONSTRUCTOR_EXPR",
        "UNARY_EXPR",
        "BINARY_EXPR",
        "NAME_EXPR",
        "LITERAL",
        "THIS_EXPR",
        "NULL_EXPR",
        "IMPLEMENTS_EXPR",
        "AS_EXPR",
        "WHEN_EXPR",
        "CASE_EXPR",
        "LET_EXPR",
        "PAREN_EXPR",
        "PURE_EXPR_LIST",
        "FN_LIST",
        "FN_LIST_PARAM",
        "ANON_FN",
        "CASE_EXPR_BRANCH",
        "LET_DEFS",
        "LET_DEF",
        "EFF_EXPR",
        "GET_EXPR",
        "NEW_EXPR",
        "ASYNC_CALL_EXPR",
        "SYNC_CALL_EXPR",
        "ORIGINAL_CALL_EXPR",
        "VAR_DECL_STMT",
        "ASSIGN_STMT",
        "SKIP_STMT",
        "RETURN_STMT",
        "ASSERT_STMT",
        "BLOCK",
        "IF_STMT",
        "SWITCH_STMT",
        "WHILE_STMT",
        "FOREACH_STMT",
        "TRY_CATCH_FINALLY_STMT",
        "AWAIT_STMT",
        "SUSPEND_STMT",
        "DURATION_STMT",
        "THROW_STMT",
        "DIE_STMT",
        "MOVE_COG_TO_STMT",
        "EXPR_STMT",
        "CLAIM_GUARD",
        "DURATION_GUARD",
        "EXPR_GUARD",
        "AND_GUARD",
        "CASE_STMT_BRANCH",
        "WILD_CARD_PATTERN",
        "INT_PATTERN",
        "STRING_PATTERN",
        "VAR_PATTERN",
        "CONSTRUCTOR_PATTERN",
        "DATA_TYPE_DECL",
        "GENERIC_ARG_LIST",
        "DATA_CONSTRUCTOR_LIST",
        "DATA_CONSTRUCTOR",
        "DATA_CONSTRUCTOR_ARG_LIST",
        "DATA_CONSTRUCTOR_ARG",
        "TYPE_SYN",
        "EXCEPTION_DECL",
        "FUNCTION_DECL",
        "PAR_FUNCTION_DECL",
        "FUNCTION_NAME_LIST",
        "INTERFACE_DECL",
        "INTERFACE_ITEM",
        "EXTENDS_LIST",
        "METHOD_SIG",
        "METHOD_DECL",
        "CLASS_DECL",
        "IMPLEMENTS_LIST",
        "FIELD_DECL",
        "RECOVER_BLOCK",
        "MODULE",
        "IMPORT_LIST",
        "EXPORT_LIST",
        "STAR_IMPORT",
        "FROM_IMPORT",
        "UNQUALIFIED_IMPORT",
        "STAR_EXPORT",
        "PARTIAL_EXPORT",
        "TRAIT_DECL",
        "TRAIT_EXPR",
        "BASIC_TRAIT_EXPR",
        "TRAIT_METHOD_SET",
        "TRAIT_METHOD",
        "TRAIT_NAME",
        "TRAIT_REMOVE_SIG",
        "TRAIT_REMOVE_SET",
        "TRAIT_ADD",
        "TRAIT_MODIFIES",
        "TRAIT_USE",
    ],
};

#[derive(Default, Debug)]
pub(crate) struct AstSrc {
    pub(crate) tokens: Vec<String>,
    pub(crate) nodes: Vec<AstNodeSrc>,
    pub(crate) enums: Vec<AstEnumSrc>,
}

#[derive(Debug)]
pub(crate) struct AstNodeSrc {
    pub(crate) doc: Vec<String>,
    pub(crate) name: String,
    pub(crate) traits: Vec<String>,
    pub(crate) fields: Vec<Field>,
}

#[derive(Debug, Eq, PartialEq)]
pub(crate) enum Field {
    Token(String),
    Node {
        name: String,
        ty: String,
        cardinality: Cardinality,
    },
}

#[derive(Debug, Eq, PartialEq)]
pub(crate) enum Cardinality {
    Optional,
    Many,
}

#[derive(Debug)]
pub(crate) struct AstEnumSrc {
    pub(crate) doc: Vec<String>,
    pub(crate) name: String,
    pub(crate) traits: Vec<String>,
    pub(crate) variants: Vec<String>,
}
