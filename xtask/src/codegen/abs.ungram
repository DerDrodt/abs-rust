VarName = 'lower_ident'

TypeName = 'cap_ident'

AnyName = VarName | TypeName

Path =
  (qualifier:TypePath '.')? segment:VarName

TypePath = 
  (qualifier:Path '.')? segment:TypeName

ParamList = '(' (Param (',' Param)*)? ')'

Param = Annotations* Type VarName

Type = Annotations* TypePath ('<' (Type (',' Type)*) '>')?

Annotation = (Type ':')? PureExpr
Annotations = '[' (Annotation (',' Annotation)*) ']'

// Expressions

Expr = PureExpr | EffExpr

PureExpr =
    FnExpr
  | PartialFnExpr
  | VariadicFnExpr
  | ConstructorExpr
  | UnaryExpr
  | BinaryExpr
  | NameExpr
  | Literal
  | ThisExpr
  | NullExpr
  | ImplementsExpr
  | AsExpr
  | WhenExpr
  | CaseExpr
  | LetExpr
  | ParenExpr


FnExpr = Path '(' PureExprList ')'

PartialFnExpr = Path '(' FnList ')'  '(' PureExprList ')'

VariadicFnExpr = Path '[' PureExprList ']'
  
ConstructorExpr = TypePath ('(' PureExprList ')')?

UnaryExpr = op:('-' | '!') PureExpr

BinaryExpr = 
  lhs:Expr 
  op:(
    '||' | '&&'
    | '==' | '!=' | '<=' | '>=' | '>' | '<'
    | '+' | '-' | '*' | '/' | '%'
  )
  rhs:Expr

NameExpr = ('this' '.')? VarName

Literal =
   value:('int_number' | 'float_number'
    | 'string')

ThisExpr = 'this'

NullExpr = 'null'

ImplementsExpr = PureExpr 'implements' TypeName

AsExpr = PureExpr 'as' TypeName

WhenExpr = ('when' | 'if') condition:PureExpr 'then' then_branch:PureExpr 'else' else_branch:PureExpr

CaseExpr = 'case' PureExpr '{' CaseExprBranch '}'

LetExpr = 'let' LetDefs 'in' PureExpr

ParenExpr = '(' PureExpr ')'

PureExprList = (PureExpr (',' PureExpr)*)?

FnList = FnListParam (',' FnListParam)?

FnListParam = VarName | AnonFn

AnonFn = ParamList '=>' PureExpr

CaseExprBranch = '|'? Pattern '=>' PureExpr ';'?

LetDefs = LetDef LetDef*

LetDef = ( '(' Type VarName '=' PureExpr ')' ) | ( Type VarName '=' PureExpr )

EffExpr = 
    GetExpr
  | NewExpr
  | AsyncCallExpr
  | SyncCallExpr
  | OriginalCallExpr

GetExpr = PureExpr '.' 'get'

NewExpr = 'new' 'local'? class:TypePath '(' PureExprList ')'

AsyncCallExpr = 'await'? callee:PureExpr '!' VarName '(' PureExprList ')'

SyncCallExpr = callee:PureExpr '.' VarName '(' PureExprList ')'

OriginalCallExpr = (('int_number' | 'core') '.' )? 'original' '(' PureExprList ')'

// Statements

Stmt =
    VarDeclStmt
  | AssignStmt
  | SkipStmt
  | ReturnStmt
  | AssertStmt
  | Block
  | IfStmt
  | SwitchStmt
  | WhileStmt
  | ForeachStmt
  | TryCatchFinallyStmt
  | AwaitStmt
  | SuspendStmt
  | DurationStmt
  | ThrowStmt
  | DieStmt
  | MoveCogToStmt
  | ExprStmt

VarDeclStmt = Annotations* Type VarName ('=' Expr)? ';'

AssignStmt = Annotations* NameExpr '=' Expr ';'

SkipStmt = Annotations* 'skip' ';'

ReturnStmt = Annotations* 'return' Expr ';'

AssertStmt = Annotations* 'assert' Expr ';'

Block = Annotations* '{' Stmt* '}'

IfStmt = Annotations* 'if' '(' condition:PureExpr ')' then_branch:Stmt ('else' else_branch: Stmt)?

SwitchStmt = Annotations* ('switch' | 'case') '(' PureExpr ')' '{' CaseStmtBranch* '}'

WhileStmt = Annotations* 'while' '(' condition:PureExpr ')' body:Stmt

ForeachStmt = Annotations* 'foreach' '(' var:VarName (',' index:VarName)? 'in' PureExpr ')' Stmt

TryCatchFinallyStmt = Annotations* 'try' Stmt 'catch' (('{' CaseStmtBranch* '}') | CaseStmtBranch) ('finally' finally:Stmt)

AwaitStmt = Annotations* 'await' Guard ';'

SuspendStmt = Annotations* 'suspend' ';'

DurationStmt = 'duration' '(' min:PureExpr ',' max:PureExpr ')' ';'

ThrowStmt = Annotations* 'throw' PureExpr ';'

DieStmt = Annotations* 'die' PureExpr ';'

MoveCogToStmt = Annotations* 'movecogto' PureExpr ';'

ExprStmt = Annotations* Expr ';'

Guard = 
    ClaimGuard
  | DurationGuard
  | ExprGuard
  | AndGuard

ClaimGuard = NameExpr '?'

DurationGuard = 'duration' '(' min:PureExpr ',' max:PureExpr ')'

ExprGuard = PureExpr

AndGuard = left:Guard '&' right:Guard

CaseStmtBranch = Pattern '=>' Stmt

// Pattern

Pattern = 
    WildCardPattern
  | IntPattern
  | StringPattern
  | VarPattern
  | ConstructorPattern

WildCardPattern = '_'

IntPattern = 'int_number'

StringPattern = 'string'

VarPattern = VarName

ConstructorPattern = TypePath ( '(' (Pattern (',' Pattern)*)? ')' )?

// Decl

DataTypeDecl = Annotations* 'data' TypePath
  GenericArgList? DataConstructorList? ';'

GenericArgList = '<' (TypeName (',' TypeName)*) '>'

DataConstructorList = '=' (DataConstructor ('|' DataConstructor)*)

DataConstructor = TypeName ('(' DataConstructorArgList ')')?

DataConstructorArgList = DataConstructorArg (',' DataConstructorArg)*

DataConstructorArg = Type TypeName?

TypeSyn = Annotations* 'type' TypePath '=' Type ';'

ExceptionDecl = Annotations* 'exception' TypePath ( '(' DataConstructorArgList ')' )? ';'

FunctionDecl = Annotations* 'def' Type Path GenericArgList? params:ParamList '=' ('builtin' | body:PureExpr) ';'

ParFunctionDecl = 
  Annotations* 'def' Type Path GenericArgList? 
  '(' functions:FunctionNameList ')' params:ParamList '=' body:PureExpr ';'

FunctionNameList = (VarName (',' VarName)*)?

InterfaceDecl = Annotations*
  'interface' TypePath extends:ExtendsList? '{' InterfaceItem* '}'

InterfaceItem = MethodSig ';'

ExtendsList = TypePath (',' TypePath)*

MethodSig = Annotations* Type VarName ParamList

MethodDecl = MethodSig Block

ClassDecl = Annotations*
  'class' TypePath ParamList?
  ImplementsList?
  '{'
  FieldDecl*
  init:Block?
  RecoverBlock?
  TraitUse*
  MethodDecl*
  '}'

ImplementsList = 'implements' (TypePath (',' TypePath)*)

FieldDecl = Annotations* Type VarName ('=' PureExpr)? ';'

RecoverBlock = 
  'recover' '{' CaseStmtBranch* '}'

Module = 'module' TypePath ';'
  Import*
  Export*
  Decl*
  main:Block?

Import = StarImport
  | FromImport
  | UnqualifiedImport

StarImport = 'import' '*' 'from' TypePath ';'
FromImport = 'import' (AnyName (',' AnyName)*) 'from' TypePath ';'
UnqualifiedImport = 'import' (AnyName (',' AnyName)*) ';'

Export = StarExport
  | PartialExport

StarExport = 'export' '*' ('from' from:TypePath)? ';'
PartialExport = 'export' (AnyName (',' AnyName)*) ('from' from:TypePath)? ';'

Decl = 
    DataTypeDecl
  | FunctionDecl
  | ParFunctionDecl
  | TypeSyn
  | ExceptionDecl
  | InterfaceDecl
  | ClassDecl
  | TraitDecl

TraitDecl = Annotations* 'trait' TypePath '=' TraitExpr

TraitExpr = BasicTraitExpr TraitOp*

BasicTraitExpr = 
    TraitMethodSet
  | TraitMethod
  | TraitName

TraitMethodSet = '{' MethodDecl* '}'

TraitMethod = MethodDecl

TraitName = TypeName

TraitOp = 
    TraitRemoveSig
  | TraitRemoveSet
  | TraitAdd
  | TraitModifies

TraitRemoveSig = 'removes' MethodSig*

TraitRemoveSet = 'removes' '{' MethodSig* '}'

TraitAdd = 'adds' BasicTraitExpr

TraitModifies = 'modifies' BasicTraitExpr

TraitUse = 'uses' TraitExpr ';'